version: "3.8"


services:
    db:
        image: postgres
        container_name: db
        restart: always
        env_file:
            - ./backend/.env
        ports:
            - "5432:5432"
    backend:
        build: ./backend 
        container_name: backend
        restart: on-failure
        volumes:
            - ./backend:/app/backend
        env_file:
            - ./backend/.env
        command:  bash -c "./wait-for.sh db:5432 -- python3 manage.py migrate && 
                           python3 manage.py runserver 0.0.0.0:8000"
        ports:
            - "8000:8000"
        stdin_open: true
        tty: true
        depends_on:
            - db
            - rabbitmq
    rabbitmq:
        image: rabbitmq
        container_name: rabbitmq
        hostname: rabbitmq
        env_file:
            - ./backend/.env
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - ./backend:/app/backend
        restart: on-failure 
    celery:
        build: ./backend
        container_name: celery
        command: bash -c "./wait-for.sh rabbitmq:5672 -- celery -A base worker -l INFO --uid=nobody --gid=nogroup"
        volumes:
            - ./backend:/app/backend
        depends_on:
            - db
            - rabbitmq
            - backend
    celery-beat:
        build: ./backend 
        container_name: beat
        command: bash -c "./wait-for.sh rabbitmq:5672 -- celery -A base beat -l INFO --uid=nobody --gid=nogroup"
        volumes:
            - ./backend:/app/backend
        depends_on:
            - db
            - rabbitmq
            - backend
    frontend:
        build: ./frontend
        container_name: frontend
        volumes:
            - ./frontend:/app
            - /app/node_modules
        ports:
            - "3000:3000"
        command: npm start
        depends_on:
            - backend
